" ##############################################################################
" ################################  Vim options  ###############################
" ##############################################################################

set backspace=indent,eol,start
set diffopt+=vertical
set expandtab
set exrc
set foldcolumn=1
set foldmethod=manual
set formatoptions=cq
set hidden
set hlsearch
set ignorecase
set langmap=ЙQ,ЦW,УE,КR,ЕT,НY,ГU,ШI,ЩO,ЗP,Х[,Ъ],ФA,ЫS,ВD,АF,ПG,РH,ОJ,ЛK,ДL,Ж\\;,Э',ЯZ,ЧX,СC,МV,ИB,ТN,ЬM,Б\\,,Ю.,йq,цw,уe,кr,еt,нy,гu,шi,щo,зp,х[,ъ],фa,ыs,вd,аf,пg,рh,оj,лk,дl,ж\\;,э',яz,чx,сc,мv,иb,тn,ьm,б\\,,ю.,"@,№#,;$,:^,?&
set lazyredraw
set noautoindent
set nocompatible
set noesckeys
set nosmartindent
set number
set relativenumber
set ruler
set runtimepath+=~/.vim/bundle/Vundle.vim/
set scrolloff=8
set secure
set shiftwidth=4
set showcmd
set softtabstop=4
set splitright
set t_ut=
set tabstop=4
set ttimeoutlen=50
set wildmenu

highlight ExtraWhitespace ctermbg=darkgreen
highlight Terminal guifg=#c0c0c0 guibg=#000040 ctermfg=gray ctermbg=black
match ExtraWhitespace /\s\+$/
syntax enable

" ##############################################################################
" ##############################  Plugin settings  #############################
" ##############################################################################

" C++11 syntax workaround
let c_no_curly_error=1

" Netrw settings
let g:netrw_bufsettings = 'noma nomod rnu nobl nowrap ro'
let g:netrw_keepdir = 0
let g:netrw_list_hide = ".*.swp"

" YouCompleteMe settings
let g:ycm_always_populate_location_list = 1
let g:ycm_confirm_extra_conf = 0
let g:ycm_global_ycm_extra_conf = expand('~/git/ovandriyanov/util/kernel_ycm_extra_conf.py')
" let g:ycm_autoclose_preview_window_after_insertion = 1

" TODO: either uncomment or remove this
" AutoPairs settings
" let g:AutoPairsMapCR = 0
" let g:AutoPairsMultilineClose = 0
" let g:AutoPairsShortcutFastWrap = '<C-e>'
" let g:AutoPairsShortcutJump = '<C-n>'
" let g:AutoPairsShortcutToggle = '<C-p>'

" ##############################################################################
" ##############################  Custom commands  #############################
" ##############################################################################

command! Vrc edit ~/.vimrc
command! Ve Vexplore!
command! E Explore
command! StripTrailingWhitespace %s/\s\+$//e
command! -count=1 PadDown call Pad(<count>)
command! -count=1 PadUp call Pad(-<count>)
command! -bang DHidden :call DeleteHiddenBuffers('<bang>')
command! -nargs=1 Yank :call Yank('<args>')

" ##############################################################################
" ##############################  Custom mappings  #############################
" ##############################################################################

" Screen escape sequences workaround
noremap             <Esc>[1~        <Home>
noremap             <Esc>[4~        <End>
tnoremap            <Esc>[1~        <Home>
tnoremap            <Esc>[4~        <End>

" QtCreator-like bindings
nnoremap            <F2>            :YcmCompleter GoTo <cr>
nnoremap            <F4>            :silent! A <cr>
nnoremap            <F6>            :vsplit <cr>:YcmCompleter GoTo <cr>
nnoremap            <F8>            :silent! AV <cr>
nnoremap            <C-k>           :CommandT <cr>

" Visual mode search
vnoremap            *               <esc>/\V<c-r>=escape(getreg('*'), '/')<cr><cr>
vnoremap            #               <esc>?\V<c-r>=escape(getreg('*'), '/')<cr><cr>
vnoremap            <Leader>*       <esc>/\V\<<c-r>=escape(getreg('*'), '/')<cr>\><cr>
vnoremap            <leader>#       <esc>?\V\<<c-r>=escape(getreg('*'), '/')<cr>\><cr>

" Command line register escaping
cnoremap            <c-r>\"         <c-r>=escape(getreg('"'), '/')<cr>
cnoremap            <c-r>\+         <c-r>=escape(getreg('+'), '/')<cr>

" Padding
nnoremap            <silent>        <Plug>PadDown :<c-U>call Pad(v:count1)<cr>:call repeat#set("\<Plug>PadDown")<cr>
nnoremap            <silent>        <Plug>PadUp :<c-U>call Pad(-v:count1)<cr>:call repeat#set("\<Plug>PadUp")<cr>
nnoremap            <C-p>j          <Plug>PadDown
nnoremap            <C-p>k          <Plug>PadUp
nnoremap            <silent>        <Plug>BreakAndPadComma :<c-U>call BreakAndPad(',', v:count1)<cr>:call repeat#set("\<Plug>BreakAndPadComma")<cr>
nnoremap            <C-p>,          <Plug>BreakAndPadComma

" Error navigation
nnoremap            <down>          :cn<cr>
nnoremap            <up>            :cp<cr>

" Buffer switching
nnoremap            <right>         :bn<cr>
nnoremap            <left>          :bp<cr>
tnoremap            <c-w><right>    <c-w>:bn<cr>
tnoremap            <c-w><left>     <c-w>:bp<cr>

" File navigation
nnoremap            <c-w>f          :vertical wincmd f<cr>
nnoremap            <c-w>F          :vertical wincmd F<cr>
" TODO: implement
" vnoremap <c-w>f :<c-u>vertical wincmd f<cr>
" vnoremap <c-w>F :<c-u>vertical wincmd F<cr>

" Should probably get rid of these...
nnoremap <F5>       :highlight ExtraWhitespace ctermbg=darkgreen <CR>
nnoremap <S-F5>     :highlight ExtraWhitespace NONE <CR>

" ##############################################################################
" ############################  Automatic commands  ############################
" ##############################################################################

augroup vimrc
    " Clear all autocommands within augroup 'vimrc'
    autocmd!

    " Do not clear clipboard on exit
    autocmd VimLeave *                  call system("xsel -ib", getreg('+'))

    " Highlight extra whitespace
    autocmd WinNew *                    highlight ExtraWhitespace ctermbg=darkgreen
    autocmd WinNew *                    match ExtraWhitespace /\s\+$/

    " Set libstdc++ source files options
    autocmd BufRead,BufNewFile /usr/include/c++/*,/usr/include/x86_64-linux-gnu/c++/*,/usr/include/linux/* call SetLibStdCppOptions()
augroup END

" ##############################################################################
" ##############################  Custom functions  ############################
" ##############################################################################

function! SetLibStdCppOptions()
    setlocal ft=cpp
    setlocal tabstop=8
endfunction

function! Pad(count)
    let l:x = a:count
    " sleep 1
    let l:pad_to = col('.')
    while l:x != 0
        if l:x > 0
            exe 'normal j^'
            let l:x = l:x - 1
        elseif l:x < 0
            exe 'normal k^'
            let l:x = l:x + 1
        endif

        let l:pad_from = col('.')
        let l:diff = abs(l:pad_to - l:pad_from)
        if l:pad_from < l:pad_to
            exe 'normal ' . l:diff . 'i '
        elseif l:diff > 0
            exe 'normal ' . l:diff . 'X'
        endif
        call cursor(line('.'), l:pad_to)
    endwhile
endfunction

function! GetCurrentChar()
    return matchstr(getline('.'), '\%' . col('.') . 'c.')
endfunction

function! BreakAndPad(char, count)
    let l:i = 0
    while l:i < a:count
        let l:line = line('.')
        let l:col = col('.')
        exe 'normal f' . a:char
        if GetCurrentChar() != a:char
            return
        endif
        exe "normal a\n"
        call cursor(l:line, l:col)
        call Pad(1)
        let l:i = l:i + 1
    endwhile
endfunction

function! DeleteHiddenBuffers(bang)
    let tpbl=[]
    call map(range(1, tabpagenr('$')), 'extend(tpbl, tabpagebuflist(v:val))')
    for buf in filter(range(1, bufnr('$')), 'bufexists(v:val) && index(tpbl, v:val)==-1')
        silent execute 'bwipeout' . a:bang buf
    endfor
endfunction

function! Yank(args)
    if len(a:args) > 1 && a:args[1] == ' '
        let l:reg = a:args[0]
        let l:yanktext = a:args[2 + match(a:args[2:], '[^ ]'):]
    else
        let l:reg = '"'
        let l:yanktext = a:args
    endif
    exe 'let @' . l:reg . ' = "' . escape(expand(l:yanktext), '"') . '"'
endfunction

" ##############################################################################
" ################################  Vundle stuff  ##############################
" ##############################################################################

filetype off
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'

" Plugin 'jiangmiao/auto-pairs'
Plugin 'endel/vim-github-colorscheme'
Plugin 'google/vim-searchindex'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'
Plugin 'vim-scripts/BufOnly.vim'

if v:version >= 802
    " C/C++ stuff
    Plugin 'vim-scripts/Cpp11-Syntax-Support'   " Proper C++11 syntax highlighting
    Plugin 'Valloric/YouCompleteMe'
    Plugin 'mom0tomo/dotfiles'
    Plugin 'wincent/command-t'
    Plugin 'vim-scripts/Conque-GDB'
    Plugin 'vim-scripts/git-time-lapse'
    Plugin 'vim-scripts/a.vim'                  " Quick switching between .h/.cpp
    Plugin 'tpope/vim-fugitive'
    Plugin 'vim-vcscommand', {'pinned': 1}
    Plugin 'vim-signify', {'pinned': 1}
    Plugin 'vim-quarc', {'pinned': 1}
endif

call vundle#end()
filetype plugin indent on

colorscheme github

" ##############################################################################
" ############################  Extra configuration  ###########################
" ##############################################################################

let s:extra_conf_file = expand('~/.vim/extra.vim')
if filereadable(s:extra_conf_file)
    exe "source " . s:extra_conf_file
endif
